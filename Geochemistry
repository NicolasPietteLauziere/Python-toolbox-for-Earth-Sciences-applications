import os
import plotly.express as px
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats.mstats import gmean
import numpy as np
import matplotlib.lines as mlines
import matplotlib.patches as patches
from sklearn.linear_model import LinearRegression

def weigth2molar(df):
    """
    Calculate whole rock molar % from oxide wt%. 
    Imput must be a dataframe structured like: df.Al2O3, df.FeO, df.K2O etc.
    with a column named df.Specimen to identify the data
    
    Output is a new dataframe structured like: df.Al, df. Fe, df.K
    If both Fe2O3 and FeO are present, output is: df.FeII, df.FeIII
    Additional columns are ignored.
    """
    wSi = 28.085
    wTi = 47.867 
    wAl = 26.982
    wFe = 55.845
    wMn = 54.938
    wMg = 24.305
    wCa = 40.078
    wNa = 22.990
    wK = 39.098
    wP = 30.974
    wO = 15.999
    #Create a new dataframe called DF
    DF = df.filter(items=['Specimen'])
    DF['Si'] = (df.SiO2*wSi/(wSi+2*wO))/wSi
    DF['Ti'] = (df.TiO2*wTi/(wTi+2*wO))/wTi
    DF['Al'] = (df.Al2O3*2*wAl/(2*wAl+3*wO))/wAl
    if 'FeO' in df.columns:
        DF['Fe'] = (df.FeO*wFe/(wFe+wO))/wFe
    elif 'Fe2O3' in df.columns:
        DF['Fe'] = (df.Fe2O3*2*wFe/(2*wFe+3*wO))/wFe
    elif 'Fe2O3'in df.columns and 'FeO' in df.columns:
        DF['FeIII'] = (df.Fe2O3*2*wFe/(2*wFe+3*wO))/wFe
        DF['FeII'] = (df.FeO*wFe/(wFe+wO))/wFe
    DF['Mn'] = (df.MnO*wMn/(wMn+wO))/wMn
    DF['Mg'] = (df.MgO*wMg/(wMg+wO))/wMg
    DF['Ca'] = (df.CaO*wCa/(wCa+wO))/wCa
    DF['Na'] = (df.Na2O*2*wNa/(2*wNa+wO))/wNa
    DF['K'] = (df.K2O*2*wK/(2*wK+wO))/wK
    DF['P'] = (df.P2O5*2*wP/(2*wP+5*wO))/wP
    
    sum = DF.sum(axis=1)
    
    DF['Si'] = DF.Si/sum*100
    DF['Ti'] = DF.Ti/sum*100
    DF['Al'] = DF.Al/sum*100
    DF['Fe'] = DF.Fe/sum*100
    DF['Mn'] = DF.Mn/sum*100
    DF['Mg'] = DF.Mg/sum*100
    DF['Ca'] = DF.Ca/sum*100
    DF['Na'] = DF.Na/sum*100
    DF['K'] = DF.K/sum*100
    DF['P'] = DF.P/sum*100
    if 'Fe2O3' in df.columns and 'FeO' in df.columns:
        DF = DF.filter(items=['Si', 'Ti', 'Al', 'FeII','FeIII', 'Mn', 'Mg', 'Ca', 
                          'Na', 'K', 'P'])
        print('both')
    else:
        DF = DF.filter(items=['Si', 'Ti', 'Al', 'Fe','Mn', 'Mg', 'Ca', 
                          'Na', 'K', 'P'])
    return(DF)

def molar2weight(df, kwarg):
    """
    Calculate whole rock oxide weigth % from molar %. 
    Imput must be a dataframe structured like: df.Al, df. Fe, df.K
    If both Fe2O3 and FeO are present, input is: df.FeII, df.FeIII
    kwarg="FeIII" or "FeII" or "both" to choose how Fe will be expressed in wt%
    
    Output is a new dataframe structured like: df.Al2O3, df.FeO, df.K2O etc.
    If both Fe2O3 and FeO are present, output is: df.FeO, df.Fe2O3

    Additional columns are ignored.
    """
    wSi = 28.085
    wTi = 47.867 
    wAl = 26.982
    wFe = 55.845
    wMn = 54.938
    wMg = 24.305
    wCa = 40.078
    wNa = 22.990
    wK = 39.098
    wP = 30.974
    wO = 15.999
    DF = df.filter(items=['Specimen'])

    DF['SiO2'] = df.Si*wSi/(wSi/(wSi+2*wO))
    DF['TiO2'] = df.Ti*wTi/(wTi/(wTi+2*wO))
    DF['Al2O3'] = df.Al*wAl/(2*wAl/(2*wAl+3*wO))
    if 'FeII' in kwarg:
        DF['FeO'] = df.Fe*wFe/(wFe/(wFe+wO))
    elif 'FeIII' in kwarg:
        DF['Fe2O3'] = df.Fe*wFe/(2*wFe/(2*wFe+3*wO))
    elif 'both' in kwarg:
        DF['Fe2O3'] = df.FeIII*wFe/(2*wFe/(2*wFe+3*wO))
        DF['FeO'] = df.FeII*wFe/(wFe/(wFe+wO))
    DF['MnO'] = df.Mn*wMn/(wMn/(wMn+wO))
    DF['MgO'] = df.Mg*wMg/(wMg/(wMg+wO))
    DF['CaO'] = df.Ca*wCa/(wCa/(wCa+wO))
    DF['Na2O'] = df.Na*wNa/(2*wNa/(2*wNa+wO))
    DF['K2O'] = df.K*wK/(2*wK/(2*wK+wO))
    DF['P2O5'] = df.P*wP/(2*wP/(2*wP+5*wO))
    
    sum = DF.sum(axis=1)
    
    DF['SiO2'] = DF.SiO2/sum*100
    DF['TiO2'] = DF.TiO2/sum*100
    DF['Al2O3'] = DF.Al2O3/sum*100
    if 'FeII' in kwarg:
        DF['FeO'] = DF.FeO/sum*100
    elif 'FeIII' in kwarg:
        DF['Fe2O3'] = DF.Fe2O3/sum*100
    elif 'both' in kwarg:
        DF['Fe2O3'] = DF.Fe2O3/sum*100
        DF['FeO'] = DF.FeO/sum*100
    DF['MnO'] = DF.MnO/sum*100
    DF['MgO'] = DF.MgO/sum*100
    DF['CaO'] = DF.CaO/sum*100
    DF['Na2O'] = DF.Na2O/sum*100
    DF['K2O'] = DF.K2O/sum*100
    DF['P2O5'] = DF.P2O5/sum*100
    
    return (DF)

def massChange(dfProtolith, dfAltered, reference):
    """
    Mass change calculation based on the bootstrap method of Ague, J., and van 
    Haren, L., 1995. Assessing Metasomatic Mass and Volume Change Using the Bootstrap, 
    with Application to Deep Crusta Hydrothermal Alteration of Marble, Economic 
    Geology, v.91, pp. 1169-1182.
    """
    dfW = dfProtolith
    df = dfAltered
    gm = []
    gm_a = []
    for i in df.columns:
        print(i)
        gm.append(gmean(dfW[i]+0.001)-len(dfW[i])*0.001)   #Geometric mean corrected for nul values
        gm_a.append(gmean(df[i]+0.001)-len(df[i])*0.001)    
        
    AML = gm / (sum(gm)*0.01)
    AML_a = gm_a / (sum(gm_a)*0.01) 
    
    # #Build a dataframe with the AMLs
    # aml = pd.DataFrame([AML, AML_a], 
    #                    index = ['protolith','altered'], 
    #                    columns = df.columns)
    # rm = []
    # for i in aml.columns:
    #     rm.append(aml[i][0] / aml[i][1])
    if len(reference) > 1:
        composite= dfW[reference].sum(axis = 1)
        composite_a = df[reference].sum(axis = 1)
        
        gmComp = gmean(composite+0.001)-len(composite)*0.001
        gmComp_a = gmean(composite_a+0.001)-len(composite_a)*0.001
        
        amlComp = gmComp / (sum(gm)*0.01)
        amlComp_a = gmComp_a / (sum(gm_a)*0.01)
        
        change = amlComp/amlComp_a
    if len(reference) == 1:
        stable = df.columns.tolist().index(reference)
        change = AML[stable] / AML_a[stable]
    
    T=[]
    for i in range(len(AML)):
        # if i == stable:
        #     T.append(0)
        # else:
        T.append(100*(change*AML_a[i] / AML[i] - 1))
    
    return(T)  

def AI(df):
    #Ishikawa alteration index
    ai = 100*(df.K2O + df.MgO) / (df.K2O + df.MgO + df.Na2O + df.CaO)
    return(ai)

def CCPI(df):
    #Chlorite-carbonate-pyrite index (CCPI )
    if 'FeO' in df.columns:
        ccpi = 100*(df.MgO + df.FeO) / (df.MgO + df.FeO + df.Na2O + df.K2O)
    elif 'Fe2O3' in df.columns: 
        ccpi = 100*(df.MgO + df.Fe2O3) / (df.MgO + df.Fe2O3 + df.Na2O + df.K2O)
    elif 'Fe2O3'in df.columns and 'FeO' in df.columns:
        ccpi = 100*(df.MgO+ df.FeO + df.Fe2O3) / (df.MgO+ df.FeO + df.Fe2O3 + 
                                                  df.Na2O + df.K2O)
    return(ccpi)

def isocon(dfProtolith, dfAltered, reference, alterationFacies, colors, ax1):
    """
    Isocon plot from Grant(1986) based on Greisen's alteration index
    input:
        dfProtolith: dataframe with chemical data of protoliths
        dfAltered: dataframe with chemical data of altered specimens
        reference: reference immobile elements e.g.: ['Al2O3', 'FeO']
        alterationFacies: dataframe column with alteration indexes 
                        e.g.: df.alteration
                                1
                                2
        colors: dictionary with plot color for each alteration
                       e.g.: {'1':'#34ebb1', '2':'#3480eb', '3':'#e8e002'}
        ax1: reference axis to plot the isocon diagram
        
        output: isocon plot
        """
    for txt in alterationFacies.unique():
        x = dfProtolith[reference].mean() #Protolith
        y = dfAltered[reference][alterationFacies==txt].mean() #Altered
        col = colors[txt]
        
        x_m = dfProtolith.mean()
        y_m = dfAltered[alterationFacies==txt].mean()
        
        #linear regression through the origin
        #m, b = np.polyfit(x, y, 1)
        A = np.vstack([x, np.ones(len(x))]).T
        m, b = np.linalg.lstsq(A, y)[0]
        
        ax1.plot(x, m*x, c = col)
        ax1.scatter(x, y, s=4, marker = "D",
                    c='k') # 
        
        for i, txt in enumerate(df[reference].columns):
            ax1.annotate(txt, (x[i], y[i]), fontsize = 10)
        
        for elmnt in df.columns[0:9]:
            print(elmnt)
            if elmnt not in reference:
                ax1.scatter(x_m[elmnt], m*y_m[elmnt], s=6, c = col, marker = "o")
                ax1.annotate(elmnt, (x_m[elmnt], m*y_m[elmnt]), fontsize = 10,
                             c = col)
        
    
    ax1.set_ylabel('Altered', fontsize = 12)
    ax1.set_xlabel('Protolith', fontsize = 12) #, fontsize=18
    return(LinearRegression)
    
def AIOCG(df):
    """
    Based on the AIOCG plot of:
    Montreuil, J.-F., Corriveau, L., Grunsky, E.C. (2013) Compositional data 
    analysis of hydrothermal alteration in IOCG systems, Great Bear magmatic zone, 
    Canada: to each alteration type its own geochemical signature. Geochemistry: 
    Exploration, Environment, Analysis 13, 229â€“247.
    Parameters
    ----------
    df : Whole rock chemitry molar%
        e.g.
        df.Fe df.Ca etc
    Returns
    X,Y coordinates for AIOCG diagram of Montreuil et al.(2013)
    -------
    """
    x = (2*df.Ca+5*df.Fe+2*df.Mn)/(2*df.Ca+5*df.Fe+2*df.Mn+df.Mg+df.Si)
    y = df.K/(df.K+df.Na+0.5*df.Ca)
    return(x,y)

def AIOCG_Labels(df, kwarg):
    """
    Based on:
    Blein, O., Corriveau, L., Montreuil, J.-F., Ehrig, K., Fabris, A., Reid, A., 
    and Pal, D. (in prep) Geochemical signatures of metasomatic ore systems hosting 
    IOCG, IOA, albitite-hosted uranium and affiliated deposits: a tool for process 
    studies and mineral exploration, in Corriveau, L., Potter, E.G. and Mumin, 
    A.H., eds., Mineral systems with iron oxide copper-gold (IOCG) and affiliated 
    deposits: Geological Association of Canada, Special Paper 52, p. XXX.

    input:  df: dataframe with whole rock chemistry in molar % 
            kwarg: type of piechart
                krwarg = 'Mg' for a Na-Ca-Fe-K-Mg label
                kwarg = 'SiAl' for a Na-Ca-Fe-K-(Si+Al)/10 label
    ouput: DF with one column per pie chart component. Each specimen gets an
            array with coordinates per columns.
    """
    if 'Mg' in kwarg:
        df = df.filter(items=['Na', 'Ca', 'Fe', 'K', 'Mg'])
        sum = df.sum(axis=1)
        df = df.divide(sum, axis='index') #normalize on Na+Ca+Fe+F+Mg
        df = df.multiply(100, axis='index') #normalize on Na+Ca+Fe+F+Mg
        x = []
        y = []
        xy = []
        DF = df
        df = df.astype('object')
        for i in range(len(df)):
            y0 = 0
            print(i)
            for r1 in df.columns:
                y = y0 + df.iloc[i][r1]
                df.iloc[i][r1] = [[0, y0],[0, y]]
                y0 = y
    elif 'SiAl' in kwarg:
        df['SiAl']= (df.Si+df.Al)/10
        df = df.filter(items=['Na', 'Ca', 'Fe', 'K', 'SiAl'])    
        sum = df.sum(axis=1)
        df = df.divide(sum, axis='index') #normalize on Na+Ca+Fe+F+Mg
        df = df.multiply(100, axis='index') #normalize on Na+Ca+Fe+F+Mg
        x = []
        y = []
        xy = []
        DF = df
        df = df.astype('object')
        for i in range(len(df)):
            y0 = 0
            print(i)
            for r1 in df.columns:
                y = y0 + df.iloc[i][r1]
                df.iloc[i][r1] = [[0, y0],[0, y]]
                y0 = y
    return(df, DF)

def plotAIOCG(df_molar, kwarg, ipath, ax):
    img = plt.imread(ipath)
    sy, sx, t = img.shape
    
    x, y = AIOCG(df_molar)
    t, DF = AIOCG_Labels(df_molar, kwarg)
    # Change x,y coordinates to match the dimension of the image
    x = x*sx
    y = sy - (y*sy)
    size = 5000
    mw=10

    ax.imshow(img)

    for i in range(len(df_molar)):
        ax.scatter(x[i], y[i], marker=t.iloc[i].Na, 
                s=size, linewidth = mw, facecolor='hotpink')
        ax.scatter(x[i], y[i], marker=t.iloc[i].Ca, 
                s=size, linewidth = mw, facecolor='green')
        ax.scatter(x[i], y[i], marker=t.iloc[i].Fe, 
                s=size, linewidth = mw, facecolor='k')
        ax.scatter(x[i], y[i], linewidth = mw, marker=t.iloc[i].K, 
                s=size, facecolor='red')
        if 'Mg' in kwarg:
            ax.scatter(x[i], y[i], marker=t.iloc[i].Mg, 
                       s=size, linewidth = mw, facecolor='lime')
        elif 'SiAl' in kwarg:
            ax.scatter(x[i], y[i], marker=t.iloc[i].SiAl, 
                    s=size, linewidth = mw, facecolor='yellow')    
    return(ax)
